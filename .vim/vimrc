set nocompatible                                                             " be iMproved, required
filetype off                                                                 " required

set rtp+=~/.vim/bundle/Vundle.vim                                            " set the runtime path to include Vundle and initialize

call vundle#begin()                                                          " all plugins below this line

Plugin 'VundleVim/Vundle.vim'                                                " let Vundle handle itself
Plugin 'vim-airline/vim-airline'                                             " airline infobar
Plugin 'vim-airline/vim-airline-themes'                                      " airline themes
Plugin 'mhinz/vim-signify'                                                   " git modify indicator
Plugin 'scrooloose/nerdtree'                                                 " nerdtree browser
Plugin 'tpope/vim-fugitive'                                                  " git wrapper
Plugin 'scrooloose/nerdcommenter'                                            " magic comments
Plugin 'taglist.vim'                                                         " source code browser
Plugin 'Yggdroot/indentLine'                                                 " identlines for crooked eyes


call vundle#end()                                                            " all plugins before this line

filetype plugin indent on                                                    " required

if has("syntax")		                                                     " Enables code syntax highlighting
  syntax on
endif

colorscheme smyck		                                                     " Set theme
set showcmd			                                                         " Show (partial) command in status line.
set showmatch			                                                     " Show matching brackets.
set ignorecase			                                                     " Do case insensitive matching
set smartcase			                                                     " Do smart case matching
set incsearch			                                                     " Incremental search
set autowrite			                                                     " Automatically save before commands like :next and :make
set hidden			                                                         " Hide buffers when they are abandoned
set number			                                                         " Enable linenumbers
set tabstop=4			                                                     " show existing tab with 4 spaces width
set shiftwidth=4		                                                     " when indenting with '>', use 4 spaces width
set expandtab			                                                     " show existing tab with 4 spaces width
set clipboard=unnamedplus                                                    " yank to CLIPBOARD
set laststatus=2                                                             " always display statusline
set autoindent                                                               " copies indentation from previous line
set smartindent                                                              " automatically indent level
set showbreak=↪                                                              " show ellipsis at breaking
set linebreak                                                                " set soft wrapping
set nobackup                                                                 " set nobackup
set nowritebackup                                                            " only in case you don't want a backup file while editing
set noswapfile                                                               " no swap files
"set cursorline                                                               " see current line

let mapleader = ','                                                          " set leaders for more hotkeys
let g:mapleader = ','

let g:airline_theme = 'hybrid'                                               " set theme for airline infobar

match Error /\%81v.\+/                                                       " mark anything after 80 chars as an error

au BufRead /tmp/neomutt-* set tw=72                                             " max 72 char lenght when writing email (mutt)

" set cursor on first empty line and enter insert mode
autocmd BufRead /tmp/neomutt-* execute "normal /^$/\n"
autocmd BufRead /tmp/neomutt-* execute ":startinsert"


" Disable Arrow keys in Escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Disable Arrow keys in Insert mode
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" mark trailing whitespace as red blocks
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" bracketed paste mode
if exists("g:loaded_bracketed_paste")
      finish
  endif
  let g:loaded_bracketed_paste = 1

  let &t_ti .= "\<Esc>[?2004h"
  let &t_te .= "\<Esc>[?2004l"

  function! XTermPasteBegin(ret)
        set pastetoggle=<f29>
          set paste
            return a:ret
        endfunction

        execute "set <f28>=\<Esc>[200~"
        execute "set <f29>=\<Esc>[201~"
        map <expr> <f28> XTermPasteBegin("i")
        imap <expr> <f28> XTermPasteBegin("")
        vmap <expr> <f28> XTermPasteBegin("c")
        cmap <f28> <nop>
        cmap <f29> <nop>

" automake nginx skeleton on nginx.conf edit.
function! NGiNX_new(afile)
        if !isdirectory(expand("<afile>:p:h"))
                call mkdir(expand("<afile>:p:h"), "p")
                call mkdir(expand("<afile>:p:h") . "/../logs")
                call mkdir(expand("<afile>:p:h") . "/../lua/lib", "p")
                exe "!cp --recursive --no-clobber ~/.vim/templates/nginx/* "
                        \ . expand("<afile>:p:h") . "/../"
        endif
endfunction

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" remove some files by extension
let NERDTreeIgnore = ['\.js.map$']
" Toggle NERDTree
nmap <silent> <leader>k :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

" indentLine
let g:indentLine_color_term = 245
let g:indentLine_color_tty_light = 4 " (default: 4)
let g:indentLine_color_dark = 2 " (default: 2)
let g:indentLine_char = '¦'
